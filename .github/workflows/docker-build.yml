name: Docker Build (Reusable)

on:
  workflow_call:
    inputs:
      push_image:
        description: 'Whether to push the built image to registry'
        required: true
        type: boolean
      registry:
        description: 'Container registry (e.g., ghcr.io)'
        required: false
        type: string
        default: 'ghcr.io'
      image_name:
        description: 'Image name'
        required: false
        type: string
        default: 'rag-file-processor'
      version:
        description: 'Version tag for the image'
        required: true
        type: string
      model_vendor:
        description: 'AI model vendor (openai or google)'
        required: false
        type: string
        default: 'openai'
      environment:
        description: 'Environment (development or production)'
        required: false
        type: string
        default: 'production'
    secrets:
      GOOGLE_API_KEY:
        description: 'Google API key'
        required: false
      OPENAI_API_KEY:
        description: 'OpenAI API key'
        required: false
      # Note: GITHUB_TOKEN is automatically provided by GitHub Actions
    outputs:
      image_url:
        description: 'Full image URL with tag'
        value: ${{ jobs.build.outputs.image_url }}
      image_digest:
        description: 'Image digest'
        value: ${{ jobs.build.outputs.image_digest }}

env:
  PYTHON_VERSION: '3.12'

jobs:
  build:
    name: Docker Build
    runs-on: ubuntu-latest
    outputs:
      image_url: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Generate production environment using local scripts
      run: |
        echo "Generating ${{ inputs.environment }} environment configuration..."
        echo "🏷️ Building version: ${{ inputs.version }}"
        echo "🤖 Using model vendor: ${{ inputs.model_vendor }}"
        
        # Use existing local deployment script logic
        cd docker_deployment
        python shared/scripts/generate_env.py \
          --environment ${{ inputs.environment }} \
          --platform unix \
          --model-vendor "${{ inputs.model_vendor }}"
          
        # Copy generated environment file
        cp .env.generated .env
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        
    - name: Log in to Container Registry
      if: ${{ inputs.push_image }}
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}  # Automatically provided by GitHub Actions
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ format('{0}/{1}/{2}', inputs.registry, github.repository_owner, inputs.image_name) }}
        tags: |
          type=raw,value=latest,enable=${{ inputs.push_image == 'true' }}
          type=raw,value=${{ inputs.version }}
        
    - name: Debug build context
      run: |
        echo "🔍 Debugging Docker build context..."
        echo "Current directory: $(pwd)"
        ls -la
        echo ""
        echo "Checking critical files that should be in build context:"
        echo "main.py: $(test -f main.py && echo '✅ EXISTS' || echo '❌ MISSING')"
        echo "CLAUDE.md: $(test -f CLAUDE.md && echo '✅ EXISTS' || echo '❌ MISSING')"
        echo "uv.lock: $(test -f uv.lock && echo '✅ EXISTS' || echo '❌ MISSING')"
        echo "src/: $(test -d src && echo '✅ EXISTS' || echo '❌ MISSING')"
        echo "docker_deployment/shared/Dockerfile: $(test -f docker_deployment/shared/Dockerfile && echo '✅ EXISTS' || echo '❌ MISSING')"
        echo "docker_deployment/.dockerignore: $(test -f docker_deployment/.dockerignore && echo '✅ EXISTS' || echo '❌ MISSING')"
        echo ""
        echo "Contents of .dockerignore:"
        cat docker_deployment/.dockerignore
        
    - name: Build and optionally push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker_deployment/shared/Dockerfile
        platforms: linux/amd64  # Only build for amd64 to save space
        push: ${{ inputs.push_image }}
        # Only load locally for production builds (deploy workflow)
        # PR validation just validates the build succeeds without loading the huge image
        load: ${{ inputs.push_image == true }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ inputs.version }}
        # Use cache to speed up builds
        cache-from: type=gha
        cache-to: type=gha,mode=min
        
    - name: Debug build output
      run: |
        echo "Build step completed. Checking what was created..."
        echo "Push mode: ${{ inputs.push_image }}"
        echo "Load mode (old): ${{ inputs.push_image == 'false' }}"
        echo "Load mode (new): ${{ inputs.push_image == false }}"
        echo "Load mode (not): ${{ !inputs.push_image }}"
        echo "All current Docker images:"
        docker images
        
    - name: Test Docker image
      run: |
        echo "Testing Docker build results..."
        
        if [ "${{ inputs.push_image }}" = "true" ]; then
          echo "🚀 Production build - Testing pushed image from registry"
          
          # For production builds, test the pushed image
          REGISTRY_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Pulling and testing registry image: $REGISTRY_TAG"
          
          docker pull "$REGISTRY_TAG"
          
          # Run basic health check on registry image
          docker run --rm \
            -e ENABLE_DOCUMENT_PROCESSING=false \
            "$REGISTRY_TAG" \
            python -c "
          import sys
          print('🐍 Python version:', sys.version)
          print('🏷️ Image version: ${{ inputs.version }}')
          
          try:
              from src.app import FolderFileProcessorApp
              from src.config import ConfigManager
              from src.core import FileProcessor
              print('✅ Core modules import successfully')
          except ImportError as e:
              print(f'❌ Import error: {e}')
              sys.exit(1)
              
          print('✅ Docker registry image test passed')
          "
          
        else
          echo "🧪 PR validation build - Build completed successfully"
          echo "✅ Docker build validation passed without loading huge image locally"
          echo "   (Avoids 'no space left on device' errors in CI)"
          echo ""
          echo "Build outputs:"
          echo "- Image built successfully: ${{ inputs.image_name }}:${{ inputs.version }}"
          echo "- Build context: Project root with docker_deployment/shared/Dockerfile"
          echo "- Dockerfile validation: ✅ All required files accessible"
          echo "- Dependencies installation: ✅ Completed during build"
          echo ""
          echo "Note: Full integration testing happens on deployment to main branch"
        fi
        
    - name: Build summary
      run: |
        echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Build Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ inputs.registry }}/${{ github.repository_owner }}/${{ inputs.image_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: \`${{ inputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Model Vendor**: \`${{ inputs.model_vendor }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: \`${{ inputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform**: \`linux/amd64\`" >> $GITHUB_STEP_SUMMARY
        if [ "${{ inputs.push_image }}" = "true" ]; then
          echo "- **Registry Push**: ✅ Enabled" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Registry Push**: ❌ Test build only" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏷️ Available Tags" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY