name: Docker Build (Reusable)

on:
  workflow_call:
    inputs:
      push_image:
        description: 'Whether to push the built image to registry'
        required: true
        type: boolean
      registry:
        description: 'Container registry (e.g., ghcr.io)'
        required: false
        type: string
        default: 'ghcr.io'
      image_name:
        description: 'Image name'
        required: false
        type: string
        default: 'rag-file-processor'
      version:
        description: 'Version tag for the image'
        required: true
        type: string
      model_vendor:
        description: 'AI model vendor (openai or google)'
        required: false
        type: string
        default: 'openai'
      environment:
        description: 'Environment (development or production)'
        required: false
        type: string
        default: 'production'
    secrets:
      GOOGLE_API_KEY:
        description: 'Google API key'
        required: false
      OPENAI_API_KEY:
        description: 'OpenAI API key'
        required: false
      REGISTRY_TOKEN:
        description: 'Personal Access Token for container registry'
        required: true
    outputs:
      image_url:
        description: 'Full image URL with tag'
        value: ${{ jobs.build.outputs.image_url }}
      image_digest:
        description: 'Image digest'
        value: ${{ jobs.build.outputs.image_digest }}

env:
  PYTHON_VERSION: '3.12'

jobs:
  build:
    name: Sequential Multi-Platform Build with Space Recycling
    runs-on: ubuntu-latest
    outputs:
      image_url: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build-amd64.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Build info and space optimization
      run: |
        echo "üè∑Ô∏è Building version: ${{ inputs.version }}"
        echo "ü§ñ Using model vendor: ${{ inputs.model_vendor }}"

        if [ "${{ inputs.push_image }}" = "true" ]; then
          echo "üèóÔ∏è Production build: Sequential multi-platform (AMD64 ‚Üí ARM64 ‚Üí manifest) with space recycling"
        else
          echo "üß™ PR validation build: Single platform (AMD64) for faster feedback"
        fi

        # Emergency space optimization - most aggressive cleanup possible
        echo "üßπ Emergency pre-build cleanup..."

        # Remove all Docker resources
        docker system prune -af --volumes
        docker builder prune -af
        docker image prune -af
        docker container prune -f
        docker volume prune -f
        docker network prune -f

        # Clear package manager caches
        sudo apt-get clean
        sudo apt-get autoclean
        sudo apt-get autoremove -y

        # Remove additional large directories if they exist
        sudo rm -rf /usr/share/dotnet || true
        sudo rm -rf /usr/local/lib/android || true
        sudo rm -rf /opt/ghc || true
        sudo rm -rf /usr/local/share/boost || true
        sudo rm -rf /usr/local/graalvm || true
        sudo rm -rf /usr/share/swift || true
        sudo rm -rf /usr/local/julia* || true
        sudo rm -rf /opt/hostedtoolcache || true

        echo "üíæ Available space after emergency cleanup:"
        df -h

    - name: Log in to Container Registry
      if: ${{ inputs.push_image }}
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.REGISTRY_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        # Emergency space optimization - minimal cache retention
        buildkitd-config-inline: |
          [worker.oci]
            gc = true
            gckeepstorage = 64000000
          [worker.containerd]
            gc = true
            gckeepstorage = 64000000

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ format('{0}/{1}/{2}', inputs.registry, github.repository, inputs.image_name) }}
        tags: |
          type=raw,value=latest,enable=${{ inputs.push_image == true }}
          type=raw,value=${{ inputs.version }}

    - name: Debug build context
      run: |
        echo "üîç Debugging Docker build context..."
        echo "Current directory: $(pwd)"
        ls -la
        echo ""
        echo "üè∑Ô∏è Docker tags that will be created:"
        echo "${{ steps.meta.outputs.tags }}"
        echo ""
        echo "Push image: ${{ inputs.push_image }}"
        echo "Latest tag enabled: ${{ inputs.push_image == true }}"
        echo ""
        echo "Checking critical files that should be in build context:"
        echo "main.py: $(test -f main.py && echo '‚úÖ EXISTS' || echo '‚ùå MISSING')"
        echo "CLAUDE.md: $(test -f CLAUDE.md && echo '‚úÖ EXISTS' || echo '‚ùå MISSING')"
        echo "uv.lock: $(test -f uv.lock && echo '‚úÖ EXISTS' || echo '‚ùå MISSING')"
        echo "src/: $(test -d src && echo '‚úÖ EXISTS' || echo '‚ùå MISSING')"
        echo "docker_deployment/shared/Dockerfile: $(test -f docker_deployment/shared/Dockerfile && echo '‚úÖ EXISTS' || echo '‚ùå MISSING')"
        echo "docker_deployment/.dockerignore: $(test -f docker_deployment/.dockerignore && echo '‚úÖ EXISTS' || echo '‚ùå MISSING')"

    # Sequential platform builds to prevent space exhaustion
    - name: Generate platform-specific tags
      id: platform-tags
      if: inputs.push_image == true
      run: |
        BASE_TAGS="${{ steps.meta.outputs.tags }}"
        AMD64_TAGS=""
        ARM64_TAGS=""

        # Convert base tags to platform-specific tags
        while IFS= read -r tag; do
          if [ -n "$tag" ]; then
            AMD64_TAGS="${AMD64_TAGS}${tag}-amd64,"
            ARM64_TAGS="${ARM64_TAGS}${tag}-arm64,"
          fi
        done <<< "$BASE_TAGS"

        # Remove trailing commas
        AMD64_TAGS="${AMD64_TAGS%,}"
        ARM64_TAGS="${ARM64_TAGS%,}"

        echo "amd64_tags=$AMD64_TAGS" >> $GITHUB_OUTPUT
        echo "arm64_tags=$ARM64_TAGS" >> $GITHUB_OUTPUT
        echo "final_tags=$BASE_TAGS" >> $GITHUB_OUTPUT

        echo "üè∑Ô∏è Platform-specific tags generated:"
        echo "AMD64: $AMD64_TAGS"
        echo "ARM64: $ARM64_TAGS"
        echo "Final: $BASE_TAGS"

    - name: Build AMD64 platform
      id: build-amd64
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker_deployment/shared/Dockerfile
        platforms: linux/amd64
        push: ${{ inputs.push_image }}
        load: false
        tags: ${{ inputs.push_image && steps.platform-tags.outputs.amd64_tags || steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ inputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=min

    # Cleanup between platform builds to recycle space
    - name: Cleanup between platform builds
      if: inputs.push_image == true
      run: |
        echo "üßπ Cleaning up between AMD64 and ARM64 builds..."
        docker builder prune -af
        docker system prune -af --volumes
        echo "üíæ Available space after AMD64 cleanup:"
        df -h

    - name: Build ARM64 platform
      id: build-arm64
      if: inputs.push_image == true  # Only build ARM64 for production
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker_deployment/shared/Dockerfile
        platforms: linux/arm64
        push: ${{ inputs.push_image }}
        load: false
        tags: ${{ steps.platform-tags.outputs.arm64_tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ inputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=min

    # Create multi-platform manifest
    - name: Create multi-platform manifest
      if: inputs.push_image == true
      run: |
        echo "üîó Creating multi-platform manifest..."

        # Get the tags we need to create manifests for
        FINAL_TAGS="${{ steps.platform-tags.outputs.final_tags }}"

        while IFS= read -r tag; do
          if [ -n "$tag" ]; then
            echo "Creating manifest for: $tag"

            # Create manifest list combining both platform-specific images
            docker manifest create "$tag" \
              "${tag}-amd64" \
              "${tag}-arm64"

            # Annotate platforms (optional but good practice)
            docker manifest annotate "$tag" "${tag}-amd64" --arch amd64 --os linux
            docker manifest annotate "$tag" "${tag}-arm64" --arch arm64 --os linux

            # Push the manifest
            docker manifest push "$tag"

            echo "‚úÖ Multi-platform manifest created and pushed: $tag"
          fi
        done <<< "$FINAL_TAGS"

    - name: Emergency post-build cleanup
      if: always()
      run: |
        echo "üßπ Post-build space cleanup..."
        docker builder prune -af
        docker system prune -af --volumes
        echo "üíæ Available space after build cleanup:"
        df -h

    - name: Debug build output
      run: |
        echo "Build step completed. Checking what was created..."
        echo "Push mode: ${{ inputs.push_image }}"
        echo "Load mode (old): ${{ inputs.push_image == 'false' }}"
        echo "Load mode (new): ${{ inputs.push_image == false }}"
        echo "Load mode (not): ${{ !inputs.push_image }}"
        echo "All current Docker images:"
        docker images

    - name: Test Docker image
      run: |
        echo "Testing Docker build results..."

        if [ "${{ inputs.push_image }}" = "true" ]; then
          echo "üöÄ Production build - Testing pushed image from registry"

          # For production builds, test the pushed image
          REGISTRY_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Pulling and testing registry image: $REGISTRY_TAG"

          docker pull "$REGISTRY_TAG"

          # Run basic health check on registry image
          docker run --rm \
            -e ENABLE_DOCUMENT_PROCESSING=false \
            "$REGISTRY_TAG" \
            python -c "import sys; print('üêç Python version:', sys.version); print('üè∑Ô∏è Image version: ${{ inputs.version }}'); exec('try:\\n    from src.app import FolderFileProcessorApp\\n    from src.config import ConfigManager\\n    from src.core import FileProcessor\\n    print(\"‚úÖ Core modules import successfully\")\\nexcept ImportError as e:\\n    print(f\"‚ùå Import error: {e}\")\\n    sys.exit(1)\\nprint(\"‚úÖ Docker registry image test passed\")')"

        else
          echo "üß™ PR validation build - Single platform validation completed"
          echo "‚úÖ Docker build validation passed (AMD64 platform)"
          echo "‚úÖ Dockerfile syntax and dependencies verified"
          echo "‚úÖ Build context and file access confirmed"
          echo ""
          echo "Build outputs:"
          echo "- Platform: linux/amd64 (validation sufficient)"
          echo "- Image built successfully: ${{ inputs.image_name }}:${{ inputs.version }}"
          echo "- Build time optimized for PR feedback speed"
          echo ""
          echo "Note: Production deployment will build multi-platform (AMD64 + ARM64)"
        fi

    - name: Build summary
      run: |
        echo "## üê≥ Optimized Multi-Platform Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ Build Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ inputs.registry }}/${{ github.repository_owner }}/${{ inputs.image_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: \`${{ inputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Model Vendor**: \`${{ inputs.model_vendor }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: \`${{ inputs.environment }}\`" >> $GITHUB_STEP_SUMMARY
        # Dynamic platform reporting
        if [ "${{ inputs.push_image }}" = "true" ]; then
          echo "- **Platforms**: \`linux/amd64, linux/arm64\` (sequential multi-platform)" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Strategy**: Sequential builds with manifest creation and space recycling" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Platforms**: \`linux/amd64\` (validation build)" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Strategy**: Single platform for faster PR feedback" >> $GITHUB_STEP_SUMMARY
        fi
        if [ "${{ inputs.push_image }}" = "true" ]; then
          echo "- **Registry Push**: ‚úÖ Enabled" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Registry Push**: ‚ùå Test build only" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üè∑Ô∏è Available Tags" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY