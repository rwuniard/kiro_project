name: PR Validation - Trunk-Based Development

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

# Cancel in-progress workflows for the same PR
concurrency:
  group: pr-validation-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.12'
  UV_VERSION: 'latest'

jobs:
  # Job 1: Unit Tests and Coverage
  test-and-coverage:
    name: Unit Tests & Coverage (85% Overall)
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for accurate coverage diff
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: ${{ env.UV_VERSION }}
        
    - name: Install dependencies
      run: |
        uv sync --all-extras
        
    - name: Run unit tests with coverage
      run: |
        echo "Running 450+ unit tests with strict coverage requirements..."
        uv run pytest \
          --cov=src \
          --cov-report=xml:coverage.xml \
          --cov-report=html:htmlcov \
          --cov-report=term-missing \
          --cov-fail-under=85 \
          --maxfail=5 \
          -v \
          tests/
      env:
        # API keys from GitHub secrets for tests that need them
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_KEY_API }}
        # Test environment configuration
        ENABLE_DOCUMENT_PROCESSING: true
        MODEL_VENDOR: openai
        CHROMA_DB_PATH: ./test_chroma_db
        
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: pr-${{ github.event.pull_request.number }}
        fail_ci_if_error: true
        verbose: true
        
    - name: Upload coverage reports as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
        retention-days: 30

  # Job 2: Security Scan
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Install dependencies for security scan
      run: uv sync
      
    - name: Run Bandit security scan
      run: |
        uv add --dev bandit[toml]
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run bandit -r src/ -f txt
      continue-on-error: true
      
    - name: Run Safety scan for dependencies
      run: |
        uv add --dev safety
        uv run safety scan --json --output safety-report.json || true
        uv run safety scan
      continue-on-error: true
      
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # Job 3: Docker Build Test (with versioning)
  docker-build-test:
    name: Docker Build Test with Versioning
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: [test-and-coverage]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Generate version number
      id: version
      run: |
        # Extract base version from pyproject.toml
        BASE_VERSION=$(python -c "
        import tomllib
        with open('pyproject.toml', 'rb') as f:
            data = tomllib.load(f)
            print(data['project']['version'])
        ")
        
        # Create version with short SHA
        SHORT_SHA=${GITHUB_SHA:0:7}
        FULL_VERSION="${BASE_VERSION}.${SHORT_SHA}"
        
        echo "base_version=${BASE_VERSION}" >> $GITHUB_OUTPUT
        echo "full_version=${FULL_VERSION}" >> $GITHUB_OUTPUT
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        
        echo "🏷️ Version: ${FULL_VERSION}"
        
    - name: Generate environment using local scripts
      run: |
        echo "Generating environment configuration using existing scripts..."
        cd docker_deployment
        
        python scripts/generate_env.py \
          --environment production \
          --platform unix \
          --model-vendor openai
          
        # Copy generated environment file
        cp .env.generated .env
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_KEY_API }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image (test only)
      run: |
        cd docker_deployment
        docker build \
          --tag rag-file-processor:${{ steps.version.outputs.full_version }} \
          --tag rag-file-processor:latest \
          --build-arg VERSION=${{ steps.version.outputs.full_version }} \
          .
        
    - name: Test Docker image
      run: |
        echo "Testing Docker image functionality..."
        docker run --rm \
          -e ENABLE_DOCUMENT_PROCESSING=false \
          rag-file-processor:${{ steps.version.outputs.full_version }} \
          python -c "
        import sys
        print('🐍 Python version:', sys.version)
        
        try:
            from src.app import FolderFileProcessorApp
            from src.config import ConfigManager
            from src.core import FileProcessor, FileManager
            print('✅ Core modules import successfully')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
            
        print('✅ Docker image test passed')
        print('🏷️ Version: ${{ steps.version.outputs.full_version }}')
        "

  # Job 4: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: [test-and-coverage]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Install system dependencies for integration tests
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr pandoc
        
    - name: Install dependencies
      run: uv sync --all-extras
      
    - name: Run comprehensive integration tests
      run: |
        echo "Running integration and end-to-end tests..."
        uv run pytest \
          tests/test_rag_integration_comprehensive/ \
          tests/test_app_integration.py \
          tests/test_app_document_processing.py \
          -v \
          --tb=short
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_KEY_API }}
        ENABLE_DOCUMENT_PROCESSING: true
        MODEL_VENDOR: openai

  # Job 5: Summary Report
  pr-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    if: always() && github.event.pull_request.draft == false
    needs: [test-and-coverage, security-scan, docker-build-test, integration-tests]
    
    steps:
    - name: Generate PR summary
      run: |
        echo "## 🚀 PR Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Test results
        if [ "${{ needs.test-and-coverage.result }}" = "success" ]; then
          echo "- ✅ **Unit Tests & Coverage**: All 450+ tests passed, 85%+ overall coverage" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Unit Tests & Coverage**: Failed - check logs for details" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Security scan
        if [ "${{ needs.security-scan.result }}" = "success" ]; then
          echo "- ✅ **Security Scan**: No critical vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ **Security Scan**: Issues found - review security reports" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Docker build
        if [ "${{ needs.docker-build-test.result }}" = "success" ]; then
          echo "- ✅ **Docker Build**: Image builds successfully with versioning" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Docker Build**: Build failed - check logs" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Integration tests
        if [ "${{ needs.integration-tests.result }}" = "success" ]; then
          echo "- ✅ **Integration Tests**: End-to-end workflows verified" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Integration Tests**: Integration failures detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Trunk-Based Development Checklist" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Short-lived feature branch" >> $GITHUB_STEP_SUMMARY
        echo "- [x] All unit tests passing" >> $GITHUB_STEP_SUMMARY
        echo "- [x] 85% overall code coverage enforced" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Security vulnerability scanning" >> $GITHUB_STEP_SUMMARY
        echo "- [x] Docker image builds with version tagging" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Manual code review (pending reviewer)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Ready for merge after manual review approval! 🎉**" >> $GITHUB_STEP_SUMMARY